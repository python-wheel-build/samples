diff --git a/third_party/triton/python/setup.py b/third_party/triton/python/setup.py
index 55425adf1c90..661fd7167110 100644
--- a/third_party/triton/python/setup.py
+++ b/third_party/triton/python/setup.py
@@ -1,5 +1,6 @@
 import os
 import platform
+import pybind11
 import re
 import shutil
 import subprocess
@@ -47,80 +48,9 @@ def get_codegen_backends():
 # --- third party packages -----
 
 
-class Package(NamedTuple):
-    package: str
-    name: str
-    url: str
-    include_flag: str
-    lib_flag: str
-    syspath_var_name: str
-
-
-# pybind11
-
-
-def get_pybind11_package_info():
-    name = "pybind11-2.11.1"
-    url = "https://github.com/pybind/pybind11/archive/refs/tags/v2.11.1.tar.gz"
-    return Package("pybind11", name, url, "PYBIND11_INCLUDE_DIR", "", "PYBIND11_SYSPATH")
-
-
-# llvm
-
-
-def get_llvm_package_info():
-    # added statement for Apple Silicon
-    system = platform.system()
-    arch = platform.machine()
-    if arch == 'aarch64':
-        arch = 'arm64'
-    if system == "Darwin":
-        arch = platform.machine()
-        if arch == "x86_64":
-            arch = "x64"
-        system_suffix = f"macos-{arch}"
-    elif system == "Linux":
-        # TODO: arm64
-        vglibc = tuple(map(int, platform.libc_ver()[1].split('.')))
-        vglibc = vglibc[0] * 100 + vglibc[1]
-        system_suffix = 'ubuntu-x64' if vglibc > 217 else 'centos-x64'
-    else:
-        return Package("llvm", "LLVM-C.lib", "", "LLVM_INCLUDE_DIRS", "LLVM_LIBRARY_DIR", "LLVM_SYSPATH")
-    # use_assert_enabled_llvm = check_env_flag("TRITON_USE_ASSERT_ENABLED_LLVM", "False")
-    # release_suffix = "assert" if use_assert_enabled_llvm else "release"
-    rev = "49af6502"
-    name = f"llvm-{rev}-{system_suffix}"
-    url = f"https://tritonlang.blob.core.windows.net/llvm-builds/{name}.tar.gz"
-    return Package("llvm", name, url, "LLVM_INCLUDE_DIRS", "LLVM_LIBRARY_DIR", "LLVM_SYSPATH")
-
-
 def get_thirdparty_packages(triton_cache_path):
-    packages = [get_pybind11_package_info(), get_llvm_package_info()]
-    thirdparty_cmake_args = []
-    for p in packages:
-        package_root_dir = os.path.join(triton_cache_path, p.package)
-        package_dir = os.path.join(package_root_dir, p.name)
-        if p.syspath_var_name in os.environ:
-            package_dir = os.environ[p.syspath_var_name]
-        version_file_path = os.path.join(package_dir, "version.txt")
-        if p.syspath_var_name not in os.environ and\
-           (not os.path.exists(version_file_path) or Path(version_file_path).read_text() != p.url):
-            try:
-                shutil.rmtree(package_root_dir)
-            except Exception:
-                pass
-            os.makedirs(package_root_dir, exist_ok=True)
-            print(f'downloading and extracting {p.url} ...')
-            ftpstream = urllib.request.urlopen(p.url)
-            file = tarfile.open(fileobj=ftpstream, mode="r|*")
-            file.extractall(path=package_root_dir)
-            # write version url to package_dir
-            with open(os.path.join(package_dir, "version.txt"), "w") as f:
-                f.write(p.url)
-        if p.include_flag:
-            thirdparty_cmake_args.append(f"-D{p.include_flag}={package_dir}/include")
-        if p.lib_flag:
-            thirdparty_cmake_args.append(f"-D{p.lib_flag}={package_dir}/lib")
+    llvm_syspath = os.environ["LLVM_SYSPATH"]
+    thirdparty_cmake_args = [f"-DPYBIND11_INCLUDE_DIR={pybind11.get_include()}", f"-DLLVM_INCLUDE_DIRS={llvm_syspath}/include", f"-DLLVM_LIBRARY_DIR={llvm_syspath}/lib"]
     return thirdparty_cmake_args
 
 
